<Application x:Class="AppUI.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:views="clr-namespace:AppUI.Views"
             xmlns:vm="clr-namespace:AppUI.ViewModels">
  <Application.Resources>

    <!-- ===== Color / Brush ===== -->
    <Color x:Key="BackColor">#F2F6FB</Color>
    <Color x:Key="SurfaceColor">#FFFFFFFF</Color>
    <Color x:Key="SurfaceMutedColor">#E6EEF8</Color>
    <Color x:Key="PrimaryColor">#2563EB</Color>
    <Color x:Key="PrimaryDarkColor">#1D4ED8</Color>
    <Color x:Key="PrimaryLightColor">#93C5FD</Color>
    <Color x:Key="AccentColor">#14B8A6</Color>
    <Color x:Key="NeutralTextColor">#1F2937</Color>
    <Color x:Key="SecondaryTextColor">#475569</Color>
    <Color x:Key="DisabledTextColor">#94A3B8</Color>
    <Color x:Key="DividerColor">#CBD5F5</Color>
    <Color x:Key="DemoMarkerColor">#802563EB</Color>

    <SolidColorBrush x:Key="BackBrush" Color="{StaticResource BackColor}"/>
    <SolidColorBrush x:Key="SurfaceBrush" Color="{StaticResource SurfaceColor}"/>
    <SolidColorBrush x:Key="SurfaceMutedBrush" Color="{StaticResource SurfaceMutedColor}"/>
    <SolidColorBrush x:Key="AccentBrush" Color="{StaticResource AccentColor}"/>
    <SolidColorBrush x:Key="FontBrush" Color="{StaticResource NeutralTextColor}"/>
    <SolidColorBrush x:Key="SecondaryFontBrush" Color="{StaticResource SecondaryTextColor}"/>
    <SolidColorBrush x:Key="BorderBrush" Color="{StaticResource DividerColor}"/>
    <SolidColorBrush x:Key="ButtonNormalBrush" Color="{StaticResource PrimaryColor}"/>
    <SolidColorBrush x:Key="ButtonActiveBrush" Color="{StaticResource PrimaryDarkColor}"/>
    <SolidColorBrush x:Key="ButtonHoverBrush" Color="#2F6FED"/>
    <SolidColorBrush x:Key="ButtonOutlineBrush" Color="{StaticResource PrimaryLightColor}"/>
    <SolidColorBrush x:Key="ViewerBackBrush" Color="#000000"/>
    <SolidColorBrush x:Key="ViewerLoadMessageBrush" Color="{StaticResource SecondaryTextColor}"/>
    <SolidColorBrush x:Key="StatusBrush" Color="{StaticResource SurfaceMutedColor}"/>
    <SolidColorBrush x:Key="ActiveEffectBrush" Color="{StaticResource PrimaryLightColor}"/>
    <SolidColorBrush x:Key="ListHeaderBrush" Color="{StaticResource PrimaryColor}"/>
    <SolidColorBrush x:Key="DemoMarkerBrush" Color="{StaticResource DemoMarkerColor}"/>
    <SolidColorBrush x:Key="WhiteEffectBrush" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="GrayEffectBrush" Color="#E2E8F0"/>
    <SolidColorBrush x:Key="InvalidFontEffectBrush" Color="{StaticResource DisabledTextColor}"/>
    <SolidColorBrush x:Key="InvalidBorderEffectBrush" Color="{StaticResource PrimaryLightColor}"/>

    <!-- ===== Label ===== -->
    <Style x:Key="LabelBase" TargetType="Label">
      <Setter Property="FontSize" Value="20"/>
      <Setter Property="FontWeight" Value="SemiBold"/>
      <Setter Property="Foreground" Value="{StaticResource FontBrush}"/>
      <Setter Property="Padding" Value="4"/>
      <Setter Property="VerticalContentAlignment" Value="Center"/>
      <Setter Property="HorizontalContentAlignment" Value="Left"/>
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="Label">
            <Border x:Name="border"
                    Background="Transparent"
                    CornerRadius="12"
                    Padding="{TemplateBinding Padding}">
              <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Border>
            <ControlTemplate.Triggers>
              <DataTrigger Binding="{Binding Tag.IsActive, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                <Setter TargetName="border" Property="Background" Value="{StaticResource ActiveEffectBrush}"/>
              </DataTrigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <Style TargetType="Label" BasedOn="{StaticResource LabelBase}"/>

    <!-- 三角アイコン（→ と ▼） -->
    <Style x:Key="StepConnector" TargetType="Rectangle">
      <Setter Property="Height" Value="4"/>
      <Setter Property="RadiusX" Value="2"/>
      <Setter Property="RadiusY" Value="2"/>
      <Setter Property="Fill" Value="{StaticResource SurfaceMutedBrush}"/>
    </Style>

    <!-- ===== Text ===== -->
    <Style x:Key="TextBlockBase" TargetType="TextBlock">
      <Setter Property="FontSize" Value="20"/>
      <Setter Property="FontWeight" Value="SemiBold"/>
      <Setter Property="Foreground" Value="{StaticResource FontBrush}"/>
    </Style>
    <Style x:Key="TextBlockMarkerPageFotterMessage" TargetType="TextBlock" BasedOn="{StaticResource TextBlockBase}">
      <Setter Property="FontSize" Value="30"/>
    </Style>
    <Style x:Key="TextBlockMarkerRoiImageTitle" TargetType="TextBlock" BasedOn="{StaticResource TextBlockBase}">
      <Setter Property="FontSize" Value="40"/>
    </Style>
    <Style x:Key="InstructionsText" TargetType="TextBlock">
      <Setter Property="FontSize" Value="20"/>
      <Setter Property="Foreground" Value="{StaticResource FontBrush}"/>
    </Style>

    <!-- ボタン内アイコン（MDL2）＝常に白 -->
    <Style x:Key="TextBlockAssetIcon" TargetType="TextBlock" BasedOn="{StaticResource TextBlockBase}">
      <Setter Property="FontSize" Value="40"/>
      <Setter Property="FontWeight" Value="Normal"/>
      <Setter Property="FontFamily" Value="Segoe MDL2 Assets"/>
      <Setter Property="VerticalAlignment" Value="Center"/>
      <Setter Property="HorizontalAlignment" Value="Center"/>
      <Setter Property="Foreground" Value="{StaticResource WhiteEffectBrush}"/>
    </Style>
    <!-- ツールバー用（小さめ） -->
    <Style x:Key="TextBlockAssetIconToolbar" TargetType="TextBlock" BasedOn="{StaticResource TextBlockAssetIcon}">
      <Setter Property="FontSize" Value="24"/>
    </Style>

    <!-- ===== Button（ブランド色） ===== -->
    <Style x:Key="RoundedButtonStyle" TargetType="Button">
      <Setter Property="Background" Value="{StaticResource ButtonNormalBrush}"/>
      <Setter Property="BorderBrush" Value="{StaticResource ButtonOutlineBrush}"/>
      <Setter Property="BorderThickness" Value="1"/>
      <Setter Property="Foreground" Value="{StaticResource WhiteEffectBrush}"/>
      <Setter Property="Padding" Value="28,20"/>
      <Setter Property="FontSize" Value="18"/>
      <Setter Property="FontWeight" Value="SemiBold"/>
      <Setter Property="Cursor" Value="Hand"/>
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="Button">
            <Border x:Name="border"
                    CornerRadius="16"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    SnapsToDevicePixels="True">
              <ContentPresenter HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                TextElement.Foreground="{TemplateBinding Foreground}"/>
            </Border>
            <ControlTemplate.Triggers>
              <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="border" Property="Background" Value="#BFD3FB"/>
                <Setter TargetName="border" Property="BorderBrush" Value="#BFD3FB"/>
                <Setter Property="Foreground" Value="#FFFFFFFF"/>
              </Trigger>
              <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="border" Property="Background" Value="{StaticResource ButtonHoverBrush}"/>
              </Trigger>
              <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="border" Property="Background" Value="{StaticResource ButtonActiveBrush}"/>
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
      <Style.Triggers>
        <DataTrigger Binding="{Binding Tag.IsActive, RelativeSource={RelativeSource Self}}" Value="True">
          <Setter Property="Background" Value="{StaticResource ButtonActiveBrush}"/>
          <Setter Property="BorderBrush" Value="{StaticResource ButtonActiveBrush}"/>
          <Setter Property="Foreground" Value="{StaticResource WhiteEffectBrush}"/>
        </DataTrigger>
      </Style.Triggers>
    </Style>

    <Style TargetType="Button" BasedOn="{StaticResource RoundedButtonStyle}"/>

    <Style x:Key="RoundedButtonStyleShort" TargetType="Button" BasedOn="{StaticResource RoundedButtonStyle}">
      <Setter Property="Padding" Value="18,16"/>
      <Setter Property="MinWidth" Value="120"/>
    </Style>

    <Style x:Key="IconButton" TargetType="Button" BasedOn="{StaticResource RoundedButtonStyle}">
      <Setter Property="Padding" Value="18"/>
      <Setter Property="MinWidth" Value="0"/>
      <Setter Property="MinHeight" Value="0"/>
      <Setter Property="Width" Value="56"/>
      <Setter Property="Height" Value="56"/>
      <Setter Property="BorderBrush" Value="Transparent"/>
    </Style>

    <Style x:Key="CardBorderStyle" TargetType="Border">
      <Setter Property="CornerRadius" Value="24"/>
      <Setter Property="Background" Value="{StaticResource SurfaceBrush}"/>
      <Setter Property="Padding" Value="36"/>
      <Setter Property="SnapsToDevicePixels" Value="True"/>
      <Setter Property="Effect">
        <Setter.Value>
          <DropShadowEffect BlurRadius="24" ShadowDepth="0" Opacity="0.15" Color="#1E3A8A"/>
        </Setter.Value>
      </Setter>
    </Style>
    <!-- アイコンボタン（コンパクト：40x40） -->
    <Style x:Key="IconButtonCompact" TargetType="Button" BasedOn="{StaticResource IconButton}">
      <Setter Property="Width" Value="40"/>
      <Setter Property="Height" Value="40"/>
      <Setter Property="Padding" Value="4"/>
    </Style>

    <!-- 三角ボタン（互換） -->
    <Style x:Key="TriangleButton" TargetType="Button">
      <Setter Property="Background" Value="{StaticResource ButtonNormalBrush}"/>
      <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBrush}"/>
      <Setter Property="Foreground" Value="{StaticResource WhiteEffectBrush}"/>
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="Button">
            <Grid>
              <Polygon x:Name="ButtonTriangle" Points="0,0 118,55 0,110"
                       Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"
                       Fill="{TemplateBinding Background}"/>
              <ContentPresenter TextBlock.FontSize="20"
                                TextElement.Foreground="{TemplateBinding Foreground}"/>
            </Grid>
            <ControlTemplate.Triggers>
              <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="ButtonTriangle" Property="Fill" Value="{StaticResource ButtonActiveBrush}"/>
                <Setter Property="BorderBrush" Value="{StaticResource ButtonActiveBrush}"/>
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
      <Style.Triggers>
        <DataTrigger Binding="{Binding Tag.IsActive, RelativeSource={RelativeSource Self}}" Value="True">
          <Setter Property="Background" Value="{StaticResource ButtonActiveBrush}"/>
          <Setter Property="BorderBrush" Value="{StaticResource ButtonActiveBrush}"/>
          <Setter Property="TextBlock.Foreground" Value="{StaticResource WhiteEffectBrush}"/>
        </DataTrigger>
      </Style.Triggers>
    </Style>

    <!-- HomeScreen が参照する互換 -->
    <Style x:Key="OptionButton" TargetType="Button" BasedOn="{StaticResource RoundedButtonStyle}">
      <Setter Property="Width" Value="163"/>
      <Setter Property="VerticalAlignment" Value="Stretch"/>
      <Setter Property="HorizontalAlignment" Value="Stretch"/>
    </Style>

    <!-- ===== Toggle / Radio（ボタン風） ===== -->
    <Style x:Key="IconToggleButton" TargetType="ToggleButton">
      <Setter Property="Width" Value="100"/>
      <Setter Property="FontSize" Value="30"/>
      <Setter Property="FontWeight" Value="Bold"/>
      <Setter Property="Background" Value="{StaticResource ButtonNormalBrush}"/>
      <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBrush}"/>
      <Setter Property="BorderThickness" Value="1"/>
      <Setter Property="Foreground" Value="{StaticResource WhiteEffectBrush}"/>
    </Style>

    <Style x:Key="RoundedToggleButtonStyle" TargetType="ToggleButton">
      <Setter Property="Background" Value="{StaticResource ButtonNormalBrush}"/>
      <Setter Property="Foreground" Value="{StaticResource WhiteEffectBrush}"/>
      <Setter Property="MinWidth" Value="80"/>
      <Setter Property="FontSize" Value="20"/>
      <Setter Property="FontWeight" Value="Bold"/>
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="ToggleButton">
            <Border x:Name="Border"
                    CornerRadius="12"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}">
              <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"
                                TextElement.Foreground="{TemplateBinding Foreground}"/>
            </Border>
            <ControlTemplate.Triggers>
              <MultiTrigger>
                <MultiTrigger.Conditions>
                  <Condition Property="IsChecked" Value="True"/>
                  <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Border" Property="Background" Value="{StaticResource ButtonActiveBrush}"/>
              </MultiTrigger>
              <MultiTrigger>
                <MultiTrigger.Conditions>
                  <Condition Property="IsChecked" Value="False"/>
                  <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Border" Property="Background" Value="{StaticResource ButtonActiveBrush}"/>
              </MultiTrigger>
              <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="Border" Property="Background" Value="{StaticResource ButtonActiveBrush}"/>
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>

    <!-- ★Radio を角丸ボタンとして使う（縦隔／肺野で使用） -->
    <Style x:Key="RadioAsButtonStyle" TargetType="RadioButton">
      <Setter Property="Foreground" Value="{StaticResource WhiteEffectBrush}"/>
      <Setter Property="Background" Value="{StaticResource ButtonNormalBrush}"/>
      <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBrush}"/>
      <Setter Property="MinWidth" Value="80"/>
      <Setter Property="Height" Value="40"/>
      <Setter Property="FontSize" Value="18"/>
      <Setter Property="FontWeight" Value="Bold"/>
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="RadioButton">
            <Border x:Name="Border"
                    CornerRadius="12"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="1">
              <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"
                                TextElement.Foreground="{TemplateBinding Foreground}"/>
            </Border>
            <ControlTemplate.Triggers>
              <MultiTrigger>
                <MultiTrigger.Conditions>
                  <Condition Property="IsChecked" Value="True"/>
                  <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Border" Property="Background" Value="{StaticResource ButtonActiveBrush}"/>
              </MultiTrigger>
              <MultiTrigger>
                <MultiTrigger.Conditions>
                  <Condition Property="IsChecked" Value="False"/>
                  <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Border" Property="Background" Value="{StaticResource ButtonActiveBrush}"/>
              </MultiTrigger>
              <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="Border" Property="Background" Value="{StaticResource ButtonActiveBrush}"/>
              </Trigger>
              <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.55"/>
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <!-- コンパクト版（幅60×高さ40、フォント16） -->
    <Style x:Key="RadioAsButtonStyleCompact" TargetType="RadioButton" BasedOn="{StaticResource RadioAsButtonStyle}">
      <Setter Property="MinWidth" Value="60"/>
      <Setter Property="Height" Value="40"/>
      <Setter Property="FontSize" Value="16"/>
    </Style>
    <!-- 互換エイリアス -->
    <Style x:Key="RoundedRadioButtonStyle" TargetType="RadioButton" BasedOn="{StaticResource RadioAsButtonStyle}"/>

    <!-- 丸い筆サイズ用：Ellipse テンプレ（小型化） -->
    <Style x:Key="BaseRoundRadioButton" TargetType="RadioButton">
      <Setter Property="Background" Value="{StaticResource ButtonNormalBrush}"/>
      <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBrush}"/>
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="RadioButton">
            <Grid>
              <Ellipse x:Name="Dot"
                       Width="{TemplateBinding Width}"
                       Height="{TemplateBinding Height}"
                       Fill="{TemplateBinding Background}"
                       Stroke="{TemplateBinding BorderBrush}"
                       StrokeThickness="1"/>
            </Grid>
            <ControlTemplate.Triggers>
              <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="Dot" Property="Fill" Value="{StaticResource ButtonActiveBrush}"/>
              </Trigger>
              <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="Dot" Property="Fill" Value="{StaticResource ButtonActiveBrush}"/>
              </Trigger>
              <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.55"/>
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <!-- 直径：14 / 18 / 24 / 30 -->
    <Style x:Key="RoundRadioButtonSmall"  TargetType="RadioButton" BasedOn="{StaticResource BaseRoundRadioButton}">
      <Setter Property="Width" Value="14"/><Setter Property="Height" Value="14"/>
    </Style>
    <Style x:Key="RoundRadioButtonMedium" TargetType="RadioButton" BasedOn="{StaticResource BaseRoundRadioButton}">
      <Setter Property="Width" Value="18"/><Setter Property="Height" Value="18"/>
    </Style>
    <Style x:Key="RoundRadioButtonLarge"  TargetType="RadioButton" BasedOn="{StaticResource BaseRoundRadioButton}">
      <Setter Property="Width" Value="24"/><Setter Property="Height" Value="24"/>
    </Style>
    <Style x:Key="RoundRadioButtonXLarge" TargetType="RadioButton" BasedOn="{StaticResource BaseRoundRadioButton}">
      <Setter Property="Width" Value="30"/><Setter Property="Height" Value="30"/>
    </Style>

    <!-- えんぴつ／消しゴム 用（横長） -->
    <Style x:Key="DrawingRadioButtonStyle" TargetType="RadioButton">
      <Setter Property="Width" Value="60"/>
      <Setter Property="Height" Value="40"/>
      <Setter Property="Foreground" Value="{StaticResource WhiteEffectBrush}"/>
      <Setter Property="Background" Value="{StaticResource ButtonNormalBrush}"/>
      <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBrush}"/>
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="RadioButton">
            <Border x:Name="Border"
                    CornerRadius="12"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}">
              <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"
                                TextElement.Foreground="{TemplateBinding Foreground}"/>
            </Border>
            <ControlTemplate.Triggers>
              <MultiTrigger>
                <MultiTrigger.Conditions>
                  <Condition Property="IsChecked" Value="True"/>
                  <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Border" Property="Background" Value="{StaticResource ButtonActiveBrush}"/>
              </MultiTrigger>
              <MultiTrigger>
                <MultiTrigger.Conditions>
                  <Condition Property="IsChecked" Value="False"/>
                  <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Border" Property="Background" Value="{StaticResource ButtonActiveBrush}"/>
              </MultiTrigger>
              <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="Border" Property="Background" Value="{StaticResource ButtonActiveBrush}"/>
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <!-- コンパクト版（幅46×高さ40） -->
    <Style x:Key="DrawingRadioButtonStyleCompact" TargetType="RadioButton" BasedOn="{StaticResource DrawingRadioButtonStyle}">
      <Setter Property="Width" Value="46"/>
      <Setter Property="Height" Value="40"/>
    </Style>

    <!-- ===== ListView / GridView ===== -->
    <Style TargetType="ListView">
      <Setter Property="Width" Value="501"/>
      <Setter Property="Height" Value="519"/>
      <Setter Property="BorderThickness" Value="1"/>
      <Setter Property="BorderBrush" Value="{StaticResource BorderBrush}"/>
      <Setter Property="Background" Value="{StaticResource BackBrush}"/>
      <Setter Property="Foreground" Value="{StaticResource FontBrush}"/>
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="ListView">
            <Border BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Background="{TemplateBinding Background}"
                    SnapsToDevicePixels="True">
              <DockPanel>
                <GridViewHeaderRowPresenter DockPanel.Dock="Top" Margin="0"
                                            Columns="{Binding View.Columns, RelativeSource={RelativeSource TemplatedParent}}"/>
                <ScrollViewer Focusable="True" Padding="{TemplateBinding Padding}">
                  <ItemsPresenter/>
                </ScrollViewer>
              </DockPanel>
            </Border>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>

    <Style TargetType="ListViewItem">
      <Setter Property="Foreground" Value="{StaticResource FontBrush}"/>
      <Setter Property="BorderBrush" Value="{StaticResource BorderBrush}"/>
      <Setter Property="BorderThickness" Value="1"/>
      <Setter Property="Padding" Value="4"/>
      <Setter Property="Margin" Value="2"/>
      <Style.Triggers>
        <Trigger Property="IsSelected" Value="True">
          <Setter Property="BorderBrush" Value="{StaticResource ButtonActiveBrush}"/>
          <Setter Property="Background" Value="#EEF2FF"/>
          <Setter Property="Foreground" Value="{StaticResource FontBrush}"/>
        </Trigger>
        <Trigger Property="IsMouseOver" Value="True">
          <Setter Property="BorderBrush" Value="{StaticResource ButtonActiveBrush}"/>
        </Trigger>
      </Style.Triggers>
    </Style>

    <Style TargetType="GridViewColumnHeader">
      <Setter Property="Background" Value="{StaticResource BackBrush}"/>
      <Setter Property="BorderBrush" Value="{StaticResource BackBrush}"/>
      <Setter Property="Foreground" Value="{StaticResource FontBrush}"/>
      <Setter Property="FontWeight" Value="Bold"/>
      <Setter Property="HorizontalContentAlignment" Value="Center"/>
      <Setter Property="Padding" Value="5"/>
    </Style>

    <!-- ===== VM→View DataTemplate（必須） ===== -->
    <DataTemplate DataType="{x:Type vm:HomeScreenViewModels}">
      <views:HomeScreen/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:MarkerRoiSettingViewModel}">
      <views:MarkerRoiSettings/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:MarkerPageHeaderViewModel}">
      <views:MarkerPageHeader/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:MarkerPageFooterViewModel}">
      <views:MarkerPageFooter/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:StateProgressViewModel}">
      <views:StateProgress/>
    </DataTemplate>

  </Application.Resources>
</Application>
